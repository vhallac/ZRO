function pprint(t, prefix)
    prefix = prefix or ""
    if type(t) == "table" then
        print(prefix.."{")
        for i, v in pairs(t) do
            pprint(prefix.." "..tostring(i)..":")
            pprint(v, prefix.."  ")
        end
        print(prefix.."}")
    else
        print(prefix..tostring(t))
    end
end

function report_mem()
    local mem, ters = gcinfo()
    print("laMemoryInfo", "Memory: "..mem.."KB  GC: "..(ters or "nil").."KB")
end

report_mem()

function clone( base_object, clone_object )
  if type( base_object ) ~= "table" then
    return clone_object or base_object
  end
  clone_object = clone_object or {}
  clone_object.__index = base_object
  return setmetatable(clone_object, clone_object)
end

function isa( clone_object, base_object )
  local clone_object_type = type(clone_object)
  local base_object_type = type(base_object)
  if clone_object_type ~= "table" and base_object_type ~= table then
    return clone_object_type == base_object_type
  end
  local index = clone_object.__index
  local _isa = index == base_object
  while not _isa and index ~= nil do
    index = index.__index
    _isa = index == base_object
  end
  return _isa
end

uOO = {}
uOO.object = clone( table, { clone = clone, isa = isa } )

playerData = uOO.object:clone()

function playerData:set_db(db)
    self.db = db
end

function playerData:get(name)
    if not self.db[name] then
        self.db[name] = { }
    end
    if not self.db[name].name then
        self.db[name].name = name
    end
    local player = uOO.player:clone()
    player:init(self.db[name])
    return player
end
uOO.playerData = playerData

player = uOO.object:clone()
function player:init(db)
    self.db = db
end

function player:name()
    return self.db.name
end
function player:class()
    return self.db.class
end

uOO.player = player

report_mem()

-- tests

players = {
    p1 = { class = "mage" },
    p2 = { class = "hunter" }
}

pd = uOO.playerData:clone()
pd:set_db(players)

p1 = pd:get("p1")
